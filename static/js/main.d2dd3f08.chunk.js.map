{"version":3,"sources":["assets/x.svg","assets/2728_color.svg","assets/logo.svg","fonts/keyrune.ttf","firebase.js","UserForm.js","Card.js","ErrorMessage.js","ListInfo.js","ConfirmatioButton.js","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginForm","attemptAction","event","preventDefault","state","input","test","props","showError","callback","handleUserInput","setState","target","value","this","onSubmit","className","htmlFor","type","id","onChange","src","x","alt","action","children","React","Component","Card","getColorIdentity","colors","identity","includes","getPrice","prices","result","undefined","usd","push","capitalizeWord","word","substring","toUpperCase","length","expandDescription","card","bought","name","quantity","rarity","sets","latestSet","imgUrl","hasFoil","onClick","checkOff","toLowerCase","aria-label","sparkle","map","item","key","set","cardSets","ErrorMessage","hideError","setTimeout","onEnd","timeoutId","errorText","ListInfo","getTotals","info","cards","tPrice","tQuantity","forEach","parseFloat","parseInt","text","number","toLocaleString","index","ConfirmationButton","toggleIsConfirming","isConfirming","confirmAction","confirmationMessage","List","focusOnCardInput","textInput","current","focus","queryNewCard","newCard","gettingCardDetails","axios","method","url","dataResponse","params","fuzzy","timeout","then","data","prints_search_uri","arrayOfSets","printings","newCardQuantity","color_identity","foil","image_uris","small","addNewCard","catch","error","handleError","queryCardSuggestions","q","possibleCards","takeCardSuggestion","suggestion","response","showTheUserAnError","details","request","console","log","message","messageToShow","showApiError","errorMessage","userCardsRef","database","ref","account","once","newCardArray","val","updateCardToBought","cardsRef","child","currentData","update","removeBoughtCards","filteredCards","filter","removeAllCards","toggleIsConfirmingDeletion","toggleIsShowingNewCardForm","isShowingNewCardForm","toggleIsShowingListInfo","isShowingListInfo","createRef","on","cardArray","username","logoutCallback","e","pCard","style","top","min","max","localFirebaseRef","localUsernameRef","App","attemptLogin","usernameToLoginWith","db","userbase","userHasLoggedIn","loginError","userReference","loggedInUsername","userRef","userIsLoggedIn","localStorage","setItem","usernameThatFailed","attemptSignup","usernameToSignupWith","signupError","signUserUp","takenUsername","newUser","alert","logUserOut","removeItem","swapIsSigningUp","isSigningUp","localUserRef","getItem","localUsername","logo","UserForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2dd3f08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.feabe299.svg\";","module.exports = __webpack_public_path__ + \"static/media/2728_color.d7d1ddfc.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c75381dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/keyrune.77551c95.ttf\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBVaqoPIZyr-D_QY1-HFaa64dUt7F6bnfQ\",\n  authDomain: \"miko-sramek-project-five.firebaseapp.com\",\n  databaseURL: \"https://miko-sramek-project-five.firebaseio.com\",\n  projectId: \"miko-sramek-project-five\",\n  storageBucket: \"miko-sramek-project-five.appspot.com\",\n  messagingSenderId: \"945213463136\",\n  appId: \"1:945213463136:web:9ac00d9dafc605b7a30105\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React from 'react';\n\n\nimport x from './assets/x.svg';\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      showError: false\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      input: ''\n    });\n  }\n  \n  attemptAction = (event) => {\n    event.preventDefault();\n    const regex = / /mg;\n    if(this.state.input !== '' && !regex.test(this.state.input)) {\n      this.props.callback(this.state.input);\n    }else {\n      //SCREAM AT USER\n      if(this.state.input === '') {\n        this.props.showError(\"Please enter a username!\");\n      }else{\n        this.props.showError(\"No spaces please!\");\n      }\n    }\n  }\n\n  handleUserInput = (event) => {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <form onSubmit={this.attemptAction} className=\"userForm\">\n          \n          \n          <label htmlFor=\"username\">Username</label>\n          <input type=\"text\" id=\"username\" value={this.state.input} onChange={this.handleUserInput}/>\n          {/* After element boss */}\n          <span></span>\n          \n          \n          <img src={x} alt=\"An x indicating where to put your username.\" />\n          <button>{this.props.action}</button>\n          <span className=\"formDivider\"></span>\n          {\n            this.props.children\n          }\n        </form>\n      </div>\n    );\n  }\n};\n\nexport default LoginForm;","import React from 'react';\n\nimport cardSets from './assets/sets.json';\nimport sparkle from './assets/2728_color.svg';\n\n\nclass Card extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expandDescription: false\n    }\n  }\n  componentDidMount() {\n    \n  }\n\n  getColorIdentity = (colors) => {\n    let identity = '';\n    //A brute force thing to make sure the colour identity is in WUBRG order. (It's an MTG thing)\n    if(colors.includes('W')){\n      identity += 'W';\n    }\n    if(colors.includes('U')){\n      identity += 'U';\n    }\n    if(colors.includes('B')){\n      identity += 'B';\n    }\n    if(colors.includes('R')){\n      identity += 'R';\n    }\n    if(colors.includes('G')){\n      identity += 'G';\n    }\n    if(identity === ''){\n      identity += 'Colorless'\n    }\n    return identity;\n  }\n\n  getPrice = (prices) => {\n    const result = [];\n    if(prices.usd !== undefined){\n      result.push(\"$\"+prices.usd+\" USD\");\n    } else {\n      result.push(\"No price info found.\");\n    }\n    return result;\n  }\n  capitalizeWord = (word) => {\n    let newWord = word.substring(0,1).toUpperCase() + word.substring(1, word.length);\n    // console.log(newWord);\n    return newWord;\n  }\n\n  render() {\n    // this.capitalizeWord('hello');\n    const { bought, name, quantity, identity, rarity, sets, latestSet, prices, imgUrl, hasFoil } = this.props.card;\n    // console.log(prices);\n    return(\n      <li>\n        <div className=\"cardHeader\">\n        \t<span \n        \t  onClick={this.props.checkOff}\n        \t  className = {`${bought ? 'bought' : ''} cardName`}\n        \t>\n        \t  <button>{bought ? <i className='far fa-check-square'></i> : <i className='far fa-square'></i>}</button> {quantity}x {name}\n            <i className={`ss ss-${latestSet.toLowerCase()} ss-${rarity.toLowerCase()}`}></i>\n        \t</ span>\n          \n        \t<button className=\"showDescriptionButton\" onClick={() => this.setState({expandDescription: !this.state.expandDescription})}>\n        \t  <i className={`fas fa-chevron-${this.state.expandDescription ? 'up' : 'down'}`} aria-label={`Expand the description for ${name}`}></i>   \n        \t</ button>\n\n        </div>\n        <div className={`cardBody ${this.state.expandDescription ? 'show' : 'hide'}`}>\n          { \n            hasFoil\n              ? <div className=\"foilMark\"><img src={sparkle} alt=\"This card has a foil version available.\"/></div>\n              : null\n          }\n          \n         \n          <div className=\"cardDetails\">\n            <div className=\"cardImage\">\n              <img src={imgUrl} alt={`The card for ${name}`}/>\n            </div>\n            <div className=\"cardText\">\n              <p>\n                {\n                  this.getColorIdentity(identity)\n                }\n              </p>\n              <p>{this.capitalizeWord(rarity)}</p>\n              {\n                this.getPrice(prices).map((item) => {\n                  return <p key={item}>{item}</p>\n                })\n              }\n            </div>\n          </div>\n          {\n            sets.map( (set) => {\n              // return  <i key={name+set} className={`ss ss-${set.toLowerCase()} ss-${rarity.toLowerCase()}`}></i> \n              return (\n              (cardSets[set.toUpperCase()] !== undefined)\n                ? <p key={name+set}><i className={`ss ss-${set} ss-${rarity}`}></i> {cardSets[set.toUpperCase()]}</p>\n                : null  \n              )\n            })\n          }\n\n        </div>\n      </li>\n    );\n  }\n};\n\nexport default Card;","import React from 'react';\n\n\nclass ErrorMessage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showError: true,\n      timeoutId: ''\n    }\n  }\n  componentDidMount() {\n    setTimeout(this.hideError, 1200);\n  }\n  hideError = () => {\n    this.setState({\n      showError: false\n    });\n    setTimeout(this.props.onEnd, 340);\n  }\n  render() {\n    return(\n      <div className={this.state.showError ? \"userWarning\" : \"userWarning userWarningHidden\"}>\n        <p>{this.props.errorText}</p>\n      </div>\n    );\n  }\n};\n\nexport default ErrorMessage;","import React from 'react';\n\n\n//Get array of cards from List.js\n  //An array passed down from props\n//Go through every card\n  //forEach\n    //total quantity\n    //prices\n    //unique sets?\n  //put these into state\n//Collect the information, and put it in state\n//Display the information\n\nclass ListInfo extends React.Component {\n  getTotals = () => {\n    const info = [];\n    if(this.props.cards !== undefined){\n      let tPrice = 0;\n      let tQuantity = 0;\n      this.props.cards.forEach((card) => {\n        if(card.prices.usd !== undefined){\n          tPrice += parseFloat(card.prices.usd) * card.quantity;\n        }\n        \n        tQuantity += parseInt(card.quantity);\n      });\n      info.push({\n        text: 'Total price: ',\n        number: '$' + tPrice.toLocaleString() + ' USD'\n      });\n      info.push({\n        text: 'Number of cards: ',\n        number: tQuantity.toLocaleString()\n      });\n      return info;\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"listInfoPanel\">\n        {\n          this.getTotals().map((info, index) => {\n            return (\n              <div key={'info' + index}>\n                <h3>{info.text}</h3>\n                <p>{info.number}</p>\n              </div>\n            )\n          })\n        }\n      </div>\n    );\n  }\n};\n\nexport default ListInfo;","import React from 'react';\n\nclass ConfirmationButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isConfirming: false,\n    }\n  }\n  toggleIsConfirming = () => {\n    this.setState({\n      isConfirming: !this.state.isConfirming\n    });\n  }\n\n  confirmAction = () => {\n    this.props.confirmAction();\n    this.toggleIsConfirming();\n  }\n\n  render() {\n    return(\n      <div className={`clearBoughtButton ${this.state.isConfirming ? 'clearBoughtConfirming' : ''}`}>\n        {\n          this.state.isConfirming \n            ? <>\n                <p>{this.props.confirmationMessage}</p>\n                <button onClick={this.confirmAction} className={`confirmClearButton ${this.state.isConfirming ? 'show' : ''}`}><i className=\"fas fa-check-circle\" aria-label=\"Confirm clearing bought cards.\"></i></button>\n                <button onClick={this.toggleIsConfirming}><i className=\"fas fa-times-circle\" aria-label=\"Cancel clearing bought cards.\"></i></button>\n              </>\n            : <button onClick={this.toggleIsConfirming}>{this.props.action}</button>\n        }\n      </div>\n    );\n  }\n};\n\nexport default ConfirmationButton;","//Import required modules\nimport React from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport axios from 'axios';\n\n//Import Components\nimport Card from './Card.js';\nimport ErrorMessage from './ErrorMessage.js';\nimport ListInfo from './ListInfo.js';\nimport ConfirmationButton from './ConfirmatioButton.js';\n\nclass List extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cards:[],\n      possibleCards: [],\n      newCard: '',\n      newCardQuantity: 1,\n      isShowingNewCardForm: false,\n      gettingCardDetails: false,\n      showApiError: false,\n      errorMessage: '',\n      isShowingListInfo: false\n    }\n    this.textInput = React.createRef();\n  }\n\n  //Focus code found from\n  //https://stackoverflow.com/questions/43145549/how-react-programmatically-focus-input\n  focusOnCardInput = () => {\n    this.textInput.current.focus();\n  }\n\n  componentDidMount() {\n    const userRef = firebase.database().ref(this.props.account);\n    userRef.on('value', (account) => {\n      const cardArray = account.val().cards;\n      if(cardArray !== undefined){\n        this.setState({\n          cards: cardArray\n        })\n      }else{\n        this.setState({\n          cards: []\n        })\n      }\n    });\n  }\n\n  queryNewCard = (event) => {\n    event.preventDefault();\n    if(this.state.newCard !== ''){    \n      this.setState({\n        gettingCardDetails: true\n      });\n      //Inital call to find the card\n      axios({\n        method: 'GET',\n        url: 'https://api.scryfall.com/cards/named',\n        dataResponse: 'json',\n        params: {\n          fuzzy:this.state.newCard,\n        },\n        timeout: 10000,\n      }).then( (result) => {\n        //Make another call to get all the printings of the card\n        axios({\n          method: 'GET',\n          url: result.data.prints_search_uri,\n          dataResponse: 'json',\n        }).then( (cardSets) => {\n          //Throw it into a variable\n          const arrayOfSets = cardSets.data.data;\n\n          //Push it into an array, and make sure there aren't any duplicates\n          const printings = [];\n          arrayOfSets.forEach((card) => {\n            if(!printings.includes(card.set)){\n              printings.push(card.set);\n            }\n          });\n          //Create the card object to throw at firebase\n          const newCard = {\n            name: result.data.name,\n            quantity: this.state.newCardQuantity,\n            rarity: result.data.rarity,\n            identity: result.data.color_identity,\n            sets: printings,\n            latestSet: result.data.set,\n            prices: result.data.prices,\n            hasFoil: result.data.foil,\n            imgUrl: result.data.image_uris.small,\n            bought: false\n          }\n          //If the sets or identity are 0 (if the api doesn't have them or they're colorless), create a dummy array so firebase doesn't delete it\n          if(newCard.sets.length === 0){\n            newCard.sets = ['No recorded sets.']\n          }\n          if(newCard.identity.length === 0) {\n            newCard.identity = ['Colorless']\n          }\n          //Pass the data to the function\n          this.addNewCard(newCard);\n          //Show the form for user submition once again\n          this.setState({\n            gettingCardDetails: false\n          });\n          this.focusOnCardInput();\n        }).catch( (error) => {\n          this.handleError(error);\n        });\n      }).catch( (error) => {\n        //General card is not found!\n        this.handleError(error);\n      });\n    }else{\n      //SCREAM AT THE USER\n    }\n  }\n  queryCardSuggestions = () => {\n    if(this.state.newCard !== ''){\n      axios({\n        method: 'GET',\n        url: 'https://api.scryfall.com/cards/autocomplete',\n        dataResponse: 'json',\n        params: {\n          q:this.state.newCard,\n        }\n      }).then( (result) => {\n        if(result.data.data.length > 0){\n          this.setState({\n            possibleCards: result.data.data\n          })\n        }else{\n          this.setState({\n            possibleCards: []\n          })\n        }\n        \n      }).catch( (error) => {\n        this.handleError(error);\n      });\n    }\n  }\n  takeCardSuggestion = (event) => {\n    const suggestion = event.target.value;\n    this.setState({\n      newCard: suggestion,\n      possibleCards: []\n    })\n  }\n  //IF statements from axios docs\n  handleError = (error) => {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      this.showTheUserAnError(error.response.data.details);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n      this.showTheUserAnError(error.message);\n    }\n  }\n  showTheUserAnError = (messageToShow) => {\n    this.setState({\n      showApiError: true,\n      errorMessage: messageToShow\n    });\n  }\n  hideError = () => {\n    this.setState({\n      showApiError: false,\n      errorMessage: '',\n      gettingCardDetails: false\n    });\n    this.focusOnCardInput();\n  }\n\n  addNewCard = (card) => {\n    const userCardsRef = firebase.database().ref(`${this.props.account}/cards`);\n    userCardsRef.once('value', (data) => {\n      //If there isn't an array, give it a new array\n      //If there is one, spread it and add the new card\n      let newCardArray;\n      if(data.val() === null){\n        newCardArray = [card];\n      }else{\n        newCardArray = [...data.val(), card];\n      }\n      userCardsRef.set(newCardArray);\n    });\n    this.setState({\n      newCard: '',\n      possibleCards: [],\n      newCardQuantity: 1\n    });\n  }\n\n  updateCardToBought = (index) => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards/${index}`);\n    cardsRef.once('value', (data) => {\n      const currentData = data.val();\n      cardsRef.update({\n        bought: !currentData.bought\n      });\n    });\n  }\n\n  removeBoughtCards = () => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards`);\n    const filteredCards = this.state.cards.filter((card) => {\n      return !card.bought\n    });\n    cardsRef.set(filteredCards);\n  }\n\n  removeAllCards = () => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards`);\n    cardsRef.set([]);\n    this.toggleIsConfirmingDeletion();\n  }\n\n  toggleIsShowingNewCardForm = () => {\n    this.setState({\n      isShowingNewCardForm: !this.state.isShowingNewCardForm\n    });\n    this.focusOnCardInput();\n  }\n  toggleIsShowingListInfo = () => {\n    this.setState({\n      isShowingListInfo: !this.state.isShowingListInfo\n    });\n  }\n\n  \n\n  render() {\n    return(\n      <div className=\"innerWrapper\">\n        <h3>Hi, {this.props.username}! Here is your list:</h3>\n\n        <button className=\"logoutButton\" onClick={this.props.logoutCallback}>Log Out</button>\n\n        {/* Start of New Card Div */}\n        <div className={`newCardMenuButton ${this.state.isShowingNewCardForm ? 'show' : ''}`}>\n          <button onClick={this.toggleIsShowingNewCardForm}><i className='fas fa-times' aria-label=\"\"></i></button>\n        </div>\n        <div className={`newCardDiv ${this.state.isShowingNewCardForm ? 'show' : ''}`}>  \n        \t{\n            //Is the api call being made?\n            this.state.gettingCardDetails\n              //Is there an API error?\n        \t    ? this.state.showApiError\n                  ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                  : <p>Fetching card data</p>\n        \t    : <form onSubmit={this.queryNewCard} className=\"newCardForm\">\n        \t        <label htmlFor=\"newCardName\">Card name:</label>\n        \t        <input type=\"text\" id=\"newCardName\" \n        \t          value={this.state.newCard} \n                    onChange={(e) => { this.setState({newCard:e.target.value}); this.queryCardSuggestions(); }} \n                    ref={this.textInput}\n        \t        />\n                  <span></span>\n                  {\n                    this.state.possibleCards.map((pCard, index) => {\n                      return <button value={pCard} onClick={this.takeCardSuggestion} type=\"button\" key={pCard+index} className=\"cardSuggestion\" style={{top: `${86 + 37*index}px`}} >{pCard}</button>\n                    })\n                  }\n        \t        <label htmlFor=\"newCardQuantity\">How many:</label>\n        \t        <input type=\"number\" id=\"newCardQuantity\" \n        \t          value={this.state.newCardQuantity} \n        \t          onChange={(e) => this.setState({newCardQuantity:e.target.value})}\n        \t          min=\"1\" max=\"1337\"  \n        \t        />\n                  <span></span>\n        \t        <button>Add Card</button>\n        \t      </form>\n        \t}\n        </div> {/* End of New Card Div */}\n\n\n\n        {/* Start of Info/Summary Panel */}\n        <div className={`infoPanelButton ${this.state.isShowingListInfo ? 'show' : ''} ${this.state.isShowingNewCardForm ? 'shift' : ''}`}>\n          <button onClick={this.toggleIsShowingListInfo}><i className=\"fas fa-receipt\" aria-label=\"\"></i></button>\n        </div>\n        <div className={`infoPanel ${this.state.isShowingListInfo ? 'show' : ''}`}>\n          <ListInfo cards={this.state.cards}  />\n          <ConfirmationButton action=\"Clear Bought\" confirmationMessage=\"Clear bought cards?\" confirmAction={this.removeBoughtCards} />\n          <ConfirmationButton action=\"Clear All\" confirmationMessage=\"Clear all cards?\" confirmAction={this.removeAllCards} />\n        </div> {/* End of Info/Summary Panel */}\n        \n        {/* Start of Card List */}\n        <ul className=\"cardList\">\n          {\n            this.state.cards !== undefined && this.state.cards.length > 0\n              ? this.state.cards.map((item, index) => {\n                return(\n                  <Card key={index} checkOff={() => this.updateCardToBought(index)} card={item}/>\n                )\n              })\n              : <li className=\"placeholderCard\">Add cards by pressing the + icon!</li>\n          }\n        </ul> {/* End of Card List */}\n        \n      </div> /* End of Inner Wrapper */\n    );\n  }\n};\n\nexport default List;","import React from 'react';\n\nimport firebase from './firebase.js';\nimport UserForm from './UserForm.js';\n\nimport List from \"./List.js\";\nimport ErrorMessage from './ErrorMessage.js';\n\nimport './App.css';\n\nimport logo from './assets/logo.svg'\nimport './fonts/keyrune.ttf';\n\n\nconst localFirebaseRef = 'user-ref';\nconst localUsernameRef = 'user-name';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userIsLoggedIn: false,\n      isSigningUp: false,\n      userRef: '',\n      username: '',\n      showError: false,\n      errorMessage: ''\n    }\n  }\n  componentDidMount() {\n    //Check if the user has a localstorage for thing\n    const localUserRef = localStorage.getItem(localFirebaseRef);\n    const localUsername = localStorage.getItem(localUsernameRef);\n    if(localUserRef !== null) {\n      this.setState({\n        userIsLoggedIn: true,\n        userRef: localUserRef,\n        username: localUsername ? localUsername : ''\n      })\n    }\n  }\n\n  showTheUserAnError = (messageToShow) => {\n    this.setState({\n      showError: true,\n      errorMessage: messageToShow\n    });\n  }\n\n  attemptLogin = (usernameToLoginWith) => {\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      for(let index in userbase){\n        if(usernameToLoginWith === userbase[index].username){\n          this.userHasLoggedIn(index, usernameToLoginWith);\n          return;\n        }\n      }\n      //The account doesn't exist\n      this.loginError(usernameToLoginWith);\n    })\n  }\n\n  userHasLoggedIn = (userReference, loggedInUsername) => {\n    this.setState({\n      userRef: userReference,\n      userIsLoggedIn: true,\n      username: loggedInUsername\n    });\n    localStorage.setItem(localFirebaseRef, userReference);\n    localStorage.setItem(localUsernameRef, loggedInUsername);\n  }\n\n  loginError = (usernameThatFailed) => {\n    this.showTheUserAnError(usernameThatFailed + \" is not registered!\")\n  }\n\n  attemptSignup = (usernameToSignupWith) => {\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      for(let index in userbase){\n        if(usernameToSignupWith === userbase[index].username){\n          //The account already exists\n          this.signupError(usernameToSignupWith);\n          return;\n        }\n      }\n      this.signUserUp(usernameToSignupWith);\n    })\n  }\n\n  signupError = (takenUsername) => {\n    // alert(\"Oopsy doopsy thewe was a fucky wucky uwu! \" + takenUsername + \" is already taken owo!\");\n    this.showTheUserAnError(takenUsername + \" is already taken!\");\n  }\n\n  signUserUp = (usernameToSignupWith) => {\n    const newUser = {\n      username: usernameToSignupWith,\n      // This is only to show object structure (firebase won't recognize it as a thing)\n      // cards: [] \n    }\n    firebase.database().ref().push(newUser);\n    //BIG POSITIVE FEEDBACK\n    alert(\"Signup Success!\");\n  }\n\n  logUserOut = () => {\n    localStorage.removeItem(localFirebaseRef);\n    this.setState({\n      userRef: '',\n      userIsLoggedIn: false\n    });\n  }\n\n\n  swapIsSigningUp = () => {\n    this.setState({\n      isSigningUp: !this.state.isSigningUp\n    });\n  }\n\n\n  //Call back functions from the ErrorMessage component!\n  showError = (message) => {\n    this.showTheUserAnError(message);\n  }\n  hideError = () => {\n    this.setState({\n      showError: false\n    });\n  }\n\n\n  render() {\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <header>\n            <div className=\"innerWrapper\">\n              <img className=\"logo\" src={logo} alt=\"A wax seal.\" />\n              <h1>Dear Magic</h1>\n              <h2>A personal buylist</h2>\n            </div>\n          </header>\n\n          <main>\n            { \n              this.state.showError\n                ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                : null\n            }\n            { \n              this.state.userIsLoggedIn\n                ? <List account={this.state.userRef} username={this.state.username} logoutCallback={this.logUserOut} />\n                : this.state.isSigningUp\n                    ? <UserForm action=\"Signup\" callback={this.attemptSignup} showError={this.showError}>\n                        <button type=\"button\" onClick={this.swapIsSigningUp} className=\"userActionSwapButton\">\n                          Already a user?\n                        </button>\n                      </UserForm>\n                    : <UserForm action=\"Login\" callback={this.attemptLogin}  showError={this.showError}>\n                        <button type=\"button\" onClick={this.swapIsSigningUp} className=\"userActionSwapButton\">\n                          Need an account?\n                        </button>\n                      </UserForm>\n            }\n          </main>\n\n        <footer>\n            <p>mikosramek © 2019</p>\n        </footer>\n        </div>\n      </div> /* End of App div */\n    );\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}