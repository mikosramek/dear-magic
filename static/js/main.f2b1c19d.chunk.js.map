{"version":3,"sources":["assets/x.svg","assets/2728_color.svg","assets/logo.svg","fonts/keyrune.ttf","firebase.js","UserForm.js","Card.js","ErrorMessage.js","ListInfo.js","ConfirmatioButton.js","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginForm","attemptAction","event","preventDefault","state","input","test","props","showError","callback","handleUserInput","setState","target","value","this","onSubmit","className","htmlFor","type","id","onChange","src","x","alt","disabled","allowAction","action","children","React","Component","Card","getColorIdentity","colors","identity","includes","getPrice","prices","result","undefined","usd","push","capitalizeWord","word","substring","toUpperCase","length","expandDescription","card","bought","name","quantity","rarity","sets","latestSet","imgUrl","hasFoil","onClick","checkOff","toLowerCase","aria-label","sparkle","map","item","key","set","cardSets","ErrorMessage","hideError","setTimeout","onEnd","errorText","ListInfo","getTotals","info","cards","tPrice","tQuantity","forEach","parseFloat","usd_foil","parseInt","text","number","toLocaleString","index","ConfirmationButton","toggleIsConfirming","isConfirming","confirmAction","confirmationMessage","List","focusOnCardInput","textInput","current","focus","queryNewCard","newCard","gettingCardDetails","axios","method","url","dataResponse","params","fuzzy","timeout","then","data","prints_search_uri","arrayOfSets","printings","newCardQuantity","color_identity","foil","image_uris","small","lastPriceCheck","Date","toDateString","addNewCard","catch","error","handleError","attemptQueryCardSuggestion","suggestionTimeoutID","clearTimeout","timeoutID","queryCardSuggestions","possibleCards","q","limitedSuggestions","slice","takeCardSuggestion","suggestion","response","showTheUserAnError","details","request","message","messageToShow","showApiError","errorMessage","userCardsRef","database","ref","account","once","newCardArray","val","updateCardToBought","cardsRef","child","currentData","update","queryCardPrices","updatingPrices","priceUpdates","todaysDate","exact","myPromise","Promise","fulfill","reject","all","spread","results","updateCardPrices","newCardData","newPrice","removeBoughtCards","filteredCards","filter","removeAllCards","filterCards","console","log","setFilter","priceOrder","currentCards","sort","cardA","cardB","toggleIsShowingNewCardForm","isShowingNewCardForm","toggleIsShowingListInfo","isShowingListInfo","toggleIsShowingFilter","isShowingFilter","createRef","on","cardArray","username","e","pCard","style","top","min","max","checked","logoutCallback","localFirebaseRef","localUsernameRef","App","attemptLogin","usernameToLoginWith","talkingToFirebase","db","userbase","userHasLoggedIn","loginError","userReference","loggedInUsername","userRef","userIsLoggedIn","localStorage","setItem","usernameThatFailed","attemptSignup","usernameToSignupWith","signupError","signUserUp","takenUsername","newUser","logUserOut","removeItem","swapIsSigningUp","isSigningUp","localUserRef","getItem","localUsername","logo","UserForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2b1c19d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.feabe299.svg\";","module.exports = __webpack_public_path__ + \"static/media/2728_color.d7d1ddfc.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c75381dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/keyrune.77551c95.ttf\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBVaqoPIZyr-D_QY1-HFaa64dUt7F6bnfQ\",\n  authDomain: \"miko-sramek-project-five.firebaseapp.com\",\n  databaseURL: \"https://miko-sramek-project-five.firebaseio.com\",\n  projectId: \"miko-sramek-project-five\",\n  storageBucket: \"miko-sramek-project-five.appspot.com\",\n  messagingSenderId: \"945213463136\",\n  appId: \"1:945213463136:web:9ac00d9dafc605b7a30105\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React from 'react';\n\n\nimport x from './assets/x.svg';\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      showError: false\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      input: ''\n    });\n  }\n  \n  attemptAction = (event) => {\n    event.preventDefault();\n    const regex = / /mg;\n    if(this.state.input !== '' && !regex.test(this.state.input)) {\n      this.props.callback(this.state.input);\n    }else {\n      //SCREAM AT USER\n      if(this.state.input === '') {\n        this.props.showError(\"Please enter a username!\");\n      }else{\n        this.props.showError(\"No spaces please!\");\n      }\n    }\n  }\n\n  handleUserInput = (event) => {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return(\n      <form onSubmit={this.attemptAction} className=\"userForm\">\n            \n        <label htmlFor=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" value={this.state.input} onChange={this.handleUserInput}/>\n        {/* After element for underline */}\n        <span></span>\n        \n        <img src={x} alt=\"An x indicating where to put your username.\" />\n        <button disabled={this.props.allowAction}>{this.props.action}</button>\n        <span className=\"formDivider\"></span>\n        {\n          this.props.children\n        }\n      </form>\n    );\n  }\n};\n\nexport default LoginForm;","import React from 'react';\n\nimport cardSets from './assets/sets.json';\nimport sparkle from './assets/2728_color.svg';\n\n\nclass Card extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expandDescription: false\n    }\n  }\n  getColorIdentity = (colors) => {\n    let identity = '';\n    //A brute force thing to make sure the colour identity is in WUBRG order. (It's an MTG thing)\n    if(colors.includes('W')){\n      identity += 'W';\n    }\n    if(colors.includes('U')){\n      identity += 'U';\n    }\n    if(colors.includes('B')){\n      identity += 'B';\n    }\n    if(colors.includes('R')){\n      identity += 'R';\n    }\n    if(colors.includes('G')){\n      identity += 'G';\n    }\n    if(identity === ''){\n      identity += 'Colorless'\n    }\n    return identity;\n  }\n\n  getPrice = (prices) => {\n    const result = [];\n    if(prices.usd !== undefined){\n      result.push(\"$\"+prices.usd+\" USD\");\n    } else {\n      result.push(\"No price info found.\");\n    }\n    return result;\n  }\n  capitalizeWord = (word) => {\n    let newWord = word.substring(0,1).toUpperCase() + word.substring(1, word.length);\n    return newWord;\n  }\n\n  render() {\n    const { bought, name, quantity, identity, rarity, sets, latestSet, prices, imgUrl, hasFoil } = this.props.card;\n    return(\n      <li>\n        {/* Start of Card Header Div */}\n        <div className=\"cardHeader\">\n        \t<span \n        \t  onClick={this.props.checkOff}\n        \t  className = {`${bought ? 'bought ' : ''}cardName`}\n        \t>\n        \t  <button>{bought ? <i className='far fa-check-square'></i> : <i className='far fa-square'></i>}</button> <span>{quantity}x {name}</span>\n            <i className={`ss ss-${latestSet.toLowerCase()} ss-${rarity.toLowerCase()}`}></i>\n        \t</ span>\n          \n        \t<button className=\"showDescriptionButton\" onClick={() => this.setState({expandDescription: !this.state.expandDescription})}>\n        \t  <i className={`fas fa-chevron-${this.state.expandDescription ? 'up' : 'down'}`} aria-label={`Expand the description for ${name}`}></i>   \n        \t</ button>\n\n        </div> {/* End of Card Header Div */}\n        {/* Start of Card Body Div */}\n        <div className={`cardBody ${this.state.expandDescription ? 'show' : 'hide'}`}>\n          { \n            // Is there a foil version available?\n            hasFoil\n              // Display the sparkle!\n              ? <div className=\"foilMark\"><img src={sparkle} alt=\"This card has a foil version available.\"/></div>\n              // Display nothing!\n              : null\n          }\n          \n          {/* Start of Card Details Div */}\n          <div className=\"cardDetails\">\n            {/* Start of Card Image Div */}\n            <div className=\"cardImage\">\n              <img src={imgUrl} alt={`The card for ${name}`}/>\n            </div> {/* End of Card Image Div */}\n            {/* Start of Card Text Div */}\n            <div className=\"cardText\">\n              <p>Identity: \n                {\n                  this.getColorIdentity(identity)\n                }\n              </p>\n              <p>Rarity: {this.capitalizeWord(rarity)}</p>\n              {\n                this.getPrice(prices).map((item) => {\n                  return <p key={item}>Price: {item}</p>\n                })\n              }\n            </div> {/* End of Card Text Div */}\n          </div> {/* End of Card Details Div */}\n          {\n            sets.map( (set) => {\n              // return  <i key={name+set} className={`ss ss-${set.toLowerCase()} ss-${rarity.toLowerCase()}`}></i> \n              return (\n              // Does the set exist in the card sets json\n              (cardSets[set.toUpperCase()] !== undefined)\n                // Display the set!\n                ? <p key={name+set}><i className={`ss ss-${set} ss-${rarity}`}></i> {cardSets[set.toUpperCase()]}</p>\n                // Display nothing! Shhhh!\n                : null  \n              )\n            })\n          }\n\n        </div> {/* End of Card Body Div */}\n      </li>\n    );\n  }\n};\n\nexport default Card;","import React from 'react';\n\n\nclass ErrorMessage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showError: true,\n    }\n  }\n  //When the component mounts, set a timer until it fades out\n  componentDidMount() {\n    setTimeout(this.hideError, 1200);\n  }\n  //When it starts to fade out, start a timer until it unmounts itself with a callback\n  hideError = () => {\n    this.setState({\n      showError: false\n    });\n    setTimeout(this.props.onEnd, 340);\n  }\n  render() {\n    return(\n      <div className={this.state.showError ? \"userWarning\" : \"userWarning userWarningHidden\"}>\n        <p>{this.props.errorText}</p>\n      </div>\n    );\n  }\n};\n\nexport default ErrorMessage;","import React from 'react';\n\n\n//Get array of cards from List.js\n  //An array passed down from props\n//Go through every card\n  //forEach\n    //total quantity\n    //prices\n    //unique sets?\n  //put these into state\n//Collect the information, and put it in state\n//Display the information\n\nclass ListInfo extends React.Component {\n  getTotals = () => {\n    const info = [];\n    if(this.props.cards !== undefined){\n      let tPrice = 0;\n      let tQuantity = 0;\n      this.props.cards.forEach((card) => {\n        //If the card has a price in usd, add it to the totals, if it doesn't, check if it does in foil.\n        if(card.prices.usd !== undefined){\n          tPrice += parseFloat(card.prices.usd) * card.quantity;\n        }else if(card.prices.usd_foil !== undefined) {\n          tPrice += parseFloat(card.prices.usd_foil) * card.quantity;\n        }\n        tQuantity += parseInt(card.quantity);\n      });\n      info.push({\n        text: 'Total price: ',\n        number: '$' + tPrice.toLocaleString() + ' USD'\n      });\n      info.push({\n        text: 'Number of cards: ',\n        number: tQuantity.toLocaleString()\n      });\n      return info;\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"listInfoPanel\">\n        {\n          this.getTotals().map((info, index) => {\n            return (\n              <div key={'info' + index}>\n                <h3>{info.text}</h3>\n                <p>{info.number}</p>\n              </div>\n            )\n          })\n        }\n      </div>\n    );\n  }\n};\n\nexport default ListInfo;","import React from 'react';\n\nclass ConfirmationButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isConfirming: false,\n    }\n  }\n  toggleIsConfirming = () => {\n    this.setState({\n      isConfirming: !this.state.isConfirming\n    });\n  }\n\n  confirmAction = () => {\n    this.props.confirmAction();\n    this.toggleIsConfirming();\n  }\n\n  render() {\n    return(\n      <div className={`clearBoughtButton ${this.state.isConfirming ? 'clearBoughtConfirming' : ''}`}>\n        {\n          this.state.isConfirming \n            ? <>\n                <p>{this.props.confirmationMessage}</p>\n                <button onClick={this.confirmAction} className={`confirmClearButton ${this.state.isConfirming ? 'show' : ''}`}><i className=\"fas fa-check-circle\" aria-label=\"Confirm clearing bought cards.\"></i></button>\n                <button onClick={this.toggleIsConfirming}><i className=\"fas fa-times-circle\" aria-label=\"Cancel clearing bought cards.\"></i></button>\n              </>\n            : <button onClick={this.toggleIsConfirming}>{this.props.action}</button>\n        }\n      </div>\n    );\n  }\n};\n\nexport default ConfirmationButton;","//Import required modules\nimport React from 'react';\n// import firebase from 'firebase/app';\n// import 'firebase/database';\nimport axios from 'axios';\n\n//Import Components\nimport Card from './Card.js';\nimport ErrorMessage from './ErrorMessage.js';\nimport ListInfo from './ListInfo.js';\nimport ConfirmationButton from './ConfirmatioButton.js';\nimport firebase from './firebase.js';\n\nclass List extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cards:[],\n      filteredCards: [],\n      possibleCards: [],\n      suggestionTimeoutID: undefined,\n      newCard: '',\n      newCardQuantity: 1,\n      isShowingNewCardForm: false,\n      gettingCardDetails: false,\n      showApiError: false,\n      errorMessage: '',\n      isShowingListInfo: false,\n      updatingPrices: false,\n      isShowingFilter: false,\n      priceOrder: 'none',\n      setFilter: ''\n    }\n    this.textInput = React.createRef();\n  }\n\n  //Focus code found from\n  //https://stackoverflow.com/questions/43145549/how-react-programmatically-focus-input\n  focusOnCardInput = () => {\n    this.textInput.current.focus();\n  }\n\n  componentDidMount() {\n    const userRef = firebase.database().ref(this.props.account);\n    userRef.on('value', (account) => {\n      const cardArray = account.val().cards;\n      if(cardArray !== undefined){\n        this.setState({\n          cards: cardArray,\n          filteredCards: cardArray\n        })\n      }else{\n        this.setState({\n          cards: []\n        })\n      }\n    });\n  }\n\n  queryNewCard = (event) => {\n    event.preventDefault();\n    if(this.state.newCard !== ''){    \n      this.setState({\n        gettingCardDetails: true\n      });\n      //Inital call to find the card\n      axios({\n        method: 'GET',\n        url: 'https://api.scryfall.com/cards/named',\n        dataResponse: 'json',\n        params: {\n          fuzzy:this.state.newCard,\n        },\n        timeout: 10000,\n      }).then( (result) => {\n        //Make another call to get all the printings of the card\n        axios({\n          method: 'GET',\n          url: result.data.prints_search_uri,\n          dataResponse: 'json',\n        }).then( (cardSets) => {\n          //Throw it into a variable\n          const arrayOfSets = cardSets.data.data;\n\n          //Push it into an array, and make sure there aren't any duplicates\n          const printings = [];\n          arrayOfSets.forEach((card) => {\n            if(!printings.includes(card.set)){\n              printings.push(card.set);\n            }\n          });\n          //Create the card object to throw at firebase\n          const newCard = {\n            name: result.data.name,\n            quantity: this.state.newCardQuantity,\n            rarity: result.data.rarity,\n            identity: result.data.color_identity,\n            sets: printings,\n            latestSet: result.data.set,\n            prices: result.data.prices,\n            hasFoil: result.data.foil,\n            imgUrl: result.data.image_uris.small,\n            bought: false,\n            lastPriceCheck: new Date().toDateString()\n          }\n          //If the sets or identity are 0 (if the api doesn't have them or they're colorless), create a dummy array so firebase doesn't delete it\n          if(newCard.sets.length === 0){\n            newCard.sets = ['No recorded sets.']\n          }\n          if(newCard.identity.length === 0) {\n            newCard.identity = ['Colorless']\n          }\n          //Pass the data to the function\n          this.addNewCard(newCard);\n          //Show the form for user submition once again\n          this.setState({\n            gettingCardDetails: false\n          });\n          this.focusOnCardInput();\n        }).catch( (error) => {\n          this.handleError(error);\n        });\n      }).catch( (error) => {\n        //General card is not found!\n        this.handleError(error);\n      });\n    }else{\n      //SCREAM AT THE USER\n    }\n  }\n\n  attemptQueryCardSuggestion = () => {\n    if(this.state.newCard !== ''){\n      if(this.state.suggestionTimeoutID !== undefined){\n        clearTimeout(this.state.suggestionTimeoutID);\n        const timeoutID = setTimeout(this.queryCardSuggestions, 300);\n        this.setState({\n          suggestionTimeoutID: timeoutID\n        });\n      }else{\n        const timeoutID = setTimeout(this.queryCardSuggestions, 300);\n        this.setState({\n          suggestionTimeoutID: timeoutID\n        });\n      }\n    }else{\n      this.setState({\n        possibleCards: []\n      })\n    }\n  }\n  queryCardSuggestions = () => {\n    this.setState({\n      suggestionTimeoutID: undefined\n    });\n    axios({\n      method: 'GET',\n      url: 'https://api.scryfall.com/cards/autocomplete',\n      dataResponse: 'json',\n      params: {\n        q:this.state.newCard,\n      }\n    }).then( (result) => {\n      if(result.data.data.length > 0){\n        var limitedSuggestions = result.data.data.slice(0, 10);\n        this.setState({\n          possibleCards: limitedSuggestions\n        })\n      }else{\n        this.setState({\n          possibleCards: []\n        })\n      }\n      \n    }).catch( (error) => {\n      this.handleError(error);\n    });\n  }\n  takeCardSuggestion = (event) => {\n    const suggestion = event.target.value;\n    this.setState({\n      newCard: suggestion,\n      possibleCards: []\n    })\n  }\n\n  //IF statements from axios docs\n  handleError = (error) => {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      this.showTheUserAnError(error.response.data.details);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      this.showTheUserAnError(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      this.showTheUserAnError(error.message);\n    }\n  }\n  showTheUserAnError = (messageToShow) => {\n    this.setState({\n      showApiError: true,\n      errorMessage: messageToShow\n    });\n  }\n  hideError = () => {\n    this.setState({\n      showApiError: false,\n      errorMessage: '',\n      gettingCardDetails: false\n    });\n    this.focusOnCardInput();\n  }\n\n  addNewCard = (card) => {\n    const userCardsRef = firebase.database().ref(`${this.props.account}/cards`);\n    userCardsRef.once('value', (data) => {\n      //If there isn't an array, give it a new array\n      //If there is one, spread it and add the new card\n      let newCardArray;\n      if(data.val() === null){\n        newCardArray = [card];\n      }else{\n        newCardArray = [...data.val(), card];\n      }\n      userCardsRef.set(newCardArray);\n    });\n    this.setState({\n      newCard: '',\n      possibleCards: [],\n      newCardQuantity: 1\n    });\n  }\n\n  updateCardToBought = (index) => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards/${index}`);\n    cardsRef.once('value', (data) => {\n      const currentData = data.val();\n      cardsRef.update({\n        bought: !currentData.bought\n      });\n    });\n  }\n\n  queryCardPrices = () => {\n    if(!this.state.updatingPrices) {\n      this.setState({\n        updatingPrices: true\n      })\n      const priceUpdates = [];\n      this.state.cards.forEach( (card) => {\n        const todaysDate = new Date();\n        if(card.lastPriceCheck !== todaysDate.toDateString()){\n          priceUpdates.push(\n            axios({\n              method: 'GET',\n              url: 'https://api.scryfall.com/cards/named',\n              dataResponse: 'json',\n              params: {\n                exact: card.name,\n              },\n              timeout: 10000,\n            })\n          );\n        }else{\n          //An empty promise -> from the Juno notes\n          const myPromise = new Promise( (fulfill, reject) => {\n            // here we say what will be returned from the promise if it is fulfilled\n            fulfill('successful!')\n            // here we say what will be returned from the promise if it is rejected\n            reject('not successful!')\n          })\n          priceUpdates.push(\n            myPromise\n          )\n        }\n      });\n      axios\n        .all(priceUpdates)\n        .then(\n          axios.spread(\n            (...results) => {\n              this.updateCardPrices(results);\n            }\n          )\n        ).catch((...errors) => {\n          this.setState({\n            updatingPrices: false\n          })\n        });\n    }\n  }\n  updateCardPrices = (newCardData) => {\n    newCardData.forEach((card, index) => {\n      if(card.data != null){\n        const newPrice = card.data.prices;\n        const cardsRef = firebase.database().ref(this.props.account).child(`cards/${index}`);\n        cardsRef.once('value', (data) => {\n          cardsRef.update({\n            prices: newPrice,\n            lastPriceCheck: new Date().toDateString()\n          })\n        });\n      }\n    });\n    this.setState({\n      updatingPrices: false\n    })\n  }\n\n  removeBoughtCards = () => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards`);\n    const filteredCards = this.state.cards.filter((card) => {\n      return !card.bought\n    });\n    cardsRef.set(filteredCards);\n  }\n  removeAllCards = () => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards`);\n    cardsRef.set([]);\n  }\n\n  filterCards = (event) => {\n    event.preventDefault();\n    console.log(\"filter: \", this.state.setFilter,this.state.priceOrder);\n    const currentCards = [...this.state.cards];\n    let newCardArray = [];\n\n    if(this.state.setFilter !== ''){\n      newCardArray = currentCards.filter((card) => {\n        if(card.sets.includes(this.state.setFilter.toLowerCase())){\n          return true;\n        }else{\n          return false;\n        }\n      });\n    }else {\n      newCardArray = [...currentCards];\n    }\n    if(this.state.priceOrder === 'desc'){\n      newCardArray.sort((cardA, cardB) => {\n        return cardA.prices.usd > cardB.prices.usd ? 1 : -1\n      });\n    }else if(this.state.priceOrder === 'asc'){\n      newCardArray.sort((cardA, cardB) => {\n        return cardA.prices.usd < cardB.prices.usd ? 1 : -1\n      });\n    }\n    this.setState({\n      filteredCards: newCardArray\n    })\n  }\n\n  toggleIsShowingNewCardForm = () => {\n    this.setState({\n      isShowingNewCardForm: !this.state.isShowingNewCardForm\n    });\n  }\n  toggleIsShowingListInfo = () => {\n    this.setState({\n      isShowingListInfo: !this.state.isShowingListInfo\n    });\n  }\n  toggleIsShowingFilter = () => {\n    this.setState({\n      isShowingFilter: !this.state.isShowingFilter\n    });\n  }\n\n  \n  render() {\n    return(\n      <div className=\"innerWrapper\">\n        <h3>Hi, {this.props.username}! Here is your list:</h3>\n\n        \n\n        {/* Start of New Card Div */}\n        <div className={`newCardMenuButton ${this.state.isShowingNewCardForm ? 'show' : ''}`}>\n          <button onClick={this.toggleIsShowingNewCardForm}><i className='fas fa-times' aria-label=\"Toggle the form for adding a new card.\"></i></button>\n        </div>\n        <div className={`newCardDiv ${this.state.isShowingNewCardForm ? 'show' : ''}`}>  \n        \t{\n            //Is the api call being made?\n            this.state.gettingCardDetails\n              //Is there an API error?\n        \t    ? this.state.showApiError\n                  ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                  : <p>Fetching card data</p>\n        \t    : <form onSubmit={this.queryNewCard} className=\"newCardForm\">\n        \t        <label htmlFor=\"newCardName\">Card name:</label>\n        \t        <input type=\"text\" id=\"newCardName\" \n        \t          value={this.state.newCard} \n                    onChange={(e) => { this.setState({newCard:e.target.value}); this.attemptQueryCardSuggestion(); }} \n                    ref={this.textInput}\n        \t        />\n                  {/* Underline span */}\n                  <span></span> \n                  {\n                    this.state.possibleCards.map((pCard, index) => {\n                      return <button value={pCard} onClick={this.takeCardSuggestion} type=\"button\" key={pCard+index} className=\"cardSuggestion\" style={{top: `${86 + 37*index}px`}} >{pCard}</button>\n                    })\n                  }\n        \t        <label htmlFor=\"newCardQuantity\">How many:</label>\n        \t        <input type=\"number\" id=\"newCardQuantity\" \n        \t          value={this.state.newCardQuantity} \n        \t          onChange={(e) => this.setState({newCardQuantity:e.target.value})}\n        \t          min=\"1\" max=\"1337\"  \n        \t        />\n                  {/* Underline span */}\n                  <span></span>\n        \t        <button>Add Card</button>\n        \t      </form>\n        \t}\n        </div> {/* End of New Card Div */}\n\n        {/* Start of Info/Summary Panel */}\n        <div className={`infoPanelButton ${this.state.isShowingListInfo ? 'show' : ''} ${this.state.isShowingNewCardForm ? 'shift' : ''} ${this.state.isShowingFilter ? 'shift2' : ''}`}>\n          <button onClick={this.toggleIsShowingListInfo}><i className=\"fas fa-receipt\" aria-label=\"Toggle the summary menu.\"></i></button>\n        </div>\n        <div className={`infoPanel ${this.state.isShowingListInfo ? 'show' : ''} ${this.state.isShowingNewCardForm ? 'shift' : ''} ${this.state.isShowingFilter ? 'shift2' : ''}`}>\n          <ListInfo cards={this.state.cards}  />\n          <button className=\"updatePricesButton\" onClick={this.queryCardPrices} disabled={this.state.updatingPrices}>\n            <i className={`fas fa-sync-alt ${this.state.updatingPrices ? 'updating' : ''}`} aria-label=\"Update card prices.\"></i>\n          </button>\n          <ConfirmationButton action=\"Clear Bought\" confirmationMessage=\"Clear bought cards?\" confirmAction={this.removeBoughtCards} />\n          <ConfirmationButton action=\"Clear All\" confirmationMessage=\"Clear all cards?\" confirmAction={this.removeAllCards} />\n        </div> {/* End of Info/Summary Panel */}\n\n        \n        <div className={`cardFilterButton ${this.state.isShowingFilter ? 'show' : ''} ${this.state.isShowingNewCardForm ? 'shift' : ''} ${this.state.isShowingListInfo ? 'shift2' : ''}`}>\n          <button onClick={this.toggleIsShowingFilter}>\n            <i className=\"fas fa-filter\" aria-label=\"Toggle the form for filtering your list.\"></i>\n          </button>\n        </div>\n        <div className={`cardFilterPanel ${this.state.isShowingFilter ? 'show' : ''} ${this.state.isShowingNewCardForm ? 'shift' : ''} ${this.state.isShowingListInfo ? 'shift2' : ''}`}>\n          <form onSubmit={this.filterCards}>\n            <fieldset>\n              <legend>Order by Price:</legend>\n              <label htmlFor=\"priceNone\" name=\"priceOrder\">\n                <input \n                  type=\"radio\" \n                  name=\"priceOrder\" \n                  id=\"priceNone\" \n                  value=\"none\"\n                  checked={this.state.priceOrder === 'none'}\n                  onChange={() => this.setState({priceOrder: 'none'})}\n                />\n                None\n              </label>\n              <label htmlFor=\"priceAsc\" name=\"priceOrder\">\n                <input \n                  type=\"radio\" \n                  name=\"priceOrder\" \n                  id=\"priceAsc\" \n                  value=\"asc\" \n                  checked={this.state.priceOrder === 'asc'}\n                  onChange={() => this.setState({priceOrder: 'asc'})}\n                />\n                High to Low\n              </label>\n              <label htmlFor=\"priceDesc\" name=\"priceOrder\">\n                <input \n                  type=\"radio\" \n                  name=\"priceOrder\" \n                  id=\"priceDesc\" \n                  value=\"desc\" \n                  checked={this.state.priceOrder === 'desc'}\n                  onChange={() => this.setState({priceOrder: 'desc'})}\n                />\n                Low to High\n              </label>\n            </fieldset>\n            <label htmlFor=\"setFilter\">Filter by Set:</label>\n            <input type=\"text\" id=\"setFilter\" value={this.state.setFilter} onChange={(e) => this.setState({setFilter: e.target.value})}/>\n            {/* Underline span */}\n            <span></span>\n            <button>Apply filter</button>\n          </form>\n        </div>\n\n\n        <button className=\"logoutButton\" onClick={this.props.logoutCallback}>Log Out</button>\n       \n\n\n        {/* Start of Card List */}\n        <ul className=\"cardList\">\n          {\n            //Are there card and more than 0 cards?\n            this.state.filteredCards !== undefined && this.state.filteredCards.length > 0\n              //Map through them!\n              ? this.state.filteredCards.map((item, index) => {\n                return(\n                  <Card key={index} checkOff={() => this.updateCardToBought(index)} card={item}/>\n                )\n              })\n              //Show a placeholder message!\n              : <li className=\"placeholderCard\">Add cards by pressing the + button!</li>\n          }\n        </ul> {/* End of Card List */}\n        \n      </div> /* End of Inner Wrapper */\n    );\n  }\n};\n\nexport default List;","import React from 'react';\n\nimport firebase from './firebase.js';\nimport UserForm from './UserForm.js';\n\nimport List from \"./List.js\";\nimport ErrorMessage from './ErrorMessage.js';\n\nimport './App.css';\n\nimport logo from './assets/logo.svg'\nimport './fonts/keyrune.ttf';\n\n\nconst localFirebaseRef = 'user-ref';\nconst localUsernameRef = 'user-name';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userIsLoggedIn: false,\n      isSigningUp: false,\n      talkingToFirebase: false,\n      userRef: '',\n      username: '',\n      showError: false,\n      errorMessage: ''\n    }\n  }\n  componentDidMount() {\n    //Check if the user has a localstorage for thing\n    const localUserRef = localStorage.getItem(localFirebaseRef);\n    const localUsername = localStorage.getItem(localUsernameRef);\n    if(localUserRef !== null) {\n      this.setState({\n        userIsLoggedIn: true,\n        userRef: localUserRef,\n        username: localUsername ? localUsername : ''\n      })\n    }\n  }\n\n  showTheUserAnError = (messageToShow) => {\n    this.setState({\n      showError: true,\n      errorMessage: messageToShow\n    });\n  }\n\n  attemptLogin = (usernameToLoginWith) => {\n    this.setState({\n      talkingToFirebase: true\n    });\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      for(let index in userbase){\n        if(usernameToLoginWith === userbase[index].username){\n          this.userHasLoggedIn(index, usernameToLoginWith);\n          return;\n        }\n      }\n      //The account doesn't exist\n      this.loginError(usernameToLoginWith);\n      this.setState({\n        talkingToFirebase: false\n      });\n    })\n  }\n\n  userHasLoggedIn = (userReference, loggedInUsername) => {\n    this.setState({\n      userRef: userReference,\n      userIsLoggedIn: true,\n      username: loggedInUsername,\n      talkingToFirebase: false\n    });\n    localStorage.setItem(localFirebaseRef, userReference);\n    localStorage.setItem(localUsernameRef, loggedInUsername);\n  }\n\n  loginError = (usernameThatFailed) => {\n    this.showTheUserAnError(usernameThatFailed + \" is not registered!\")\n  }\n\n  attemptSignup = (usernameToSignupWith) => {\n    this.setState({\n      talkingToFirebase: true\n    });\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      for(let index in userbase){\n        if(usernameToSignupWith === userbase[index].username){\n          //The account already exists\n          this.signupError(usernameToSignupWith);\n          this.setState({\n            talkingToFirebase: false\n          });\n          return;\n        }\n      }\n      this.signUserUp(usernameToSignupWith);\n    })\n  }\n\n  signupError = (takenUsername) => {\n    // alert(\"Oopsy doopsy thewe was a fucky wucky uwu! \" + takenUsername + \" is already taken owo!\");\n    this.showTheUserAnError(takenUsername + \" is already taken!\");\n  }\n\n  signUserUp = (usernameToSignupWith) => {\n    const newUser = {\n      username: usernameToSignupWith,\n      // This is only to show object structure (firebase won't recognize it as a thing)\n      // cards: [] \n    }\n    firebase.database().ref().push(newUser);\n    //BIG POSITIVE FEEDBACK\n    // alert(\"Signup Success!\");\n    this.showTheUserAnError(\"Signup was Successful!\");\n    this.setState({\n      talkingToFirebase: false\n    });\n  }\n\n  logUserOut = () => {\n    localStorage.removeItem(localFirebaseRef);\n    this.setState({\n      userRef: '',\n      userIsLoggedIn: false\n    });\n  }\n\n\n  swapIsSigningUp = () => {\n    this.setState({\n      isSigningUp: !this.state.isSigningUp\n    });\n  }\n\n\n  //Call back functions from the ErrorMessage component!\n  showError = (message) => {\n    this.showTheUserAnError(message);\n  }\n  hideError = () => {\n    this.setState({\n      showError: false\n    });\n  }\n\n\n  render() {\n    return(\n      <div>\n        {/* Start of Wrapper */}\n        <div className=\"wrapper\">\n          <header>\n            <div className=\"innerWrapper\">\n              <img className=\"logo\" src={logo} alt=\"A wax seal.\" />\n              <h1>Dear Magic</h1>\n              <h2>A personal buylist for <span>Magic: The Gathering</span></h2>\n            </div>\n          </header>\n\n          <main>\n            { \n              this.state.showError\n                ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                : null\n            }\n            { \n              // Is the user logged in?\n              this.state.userIsLoggedIn\n                // Show them their list!\n                ? <List account={this.state.userRef} username={this.state.username} logoutCallback={this.logUserOut} />\n                // Show them the login/signup form -> Are they signing up?\n                : this.state.isSigningUp\n                    // Show them the signup form\n                    ? <UserForm \n                        action=\"Signup\" \n                        allowAction={this.state.talkingToFirebase} \n                        callback={this.attemptSignup} \n                        showError={this.showError} \n                      >\n                        <button type=\"button\" onClick={this.swapIsSigningUp} className=\"userActionSwapButton\">\n                          Already a user?\n                        </button>\n                      </UserForm>\n                    // Show them the login form\n                    : <UserForm \n                        action=\"Login\" \n                        callback={this.attemptLogin}  \n                        showError={this.showError}\n                        allowAction={this.state.talkingToFirebase} \n                      >\n                        <button type=\"button\" onClick={this.swapIsSigningUp} className=\"userActionSwapButton\">\n                          Need an account?\n                        </button>\n                      </UserForm>\n            }\n          </main>\n\n        <footer>\n            <p>mikosramek © 2019</p>\n        </footer>\n\n        </div> {/* End of Wrapper */}\n      </div> /* End of App div */\n    );\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}