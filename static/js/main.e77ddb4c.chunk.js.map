{"version":3,"sources":["assets/2728_color.svg","assets/logo.svg","fonts/keyrune.ttf","firebase.js","components/UserForm.js","components/Card.js","components/ConfirmationButton.js","components/ListInfo.js","components/CardFilterForm.js","components/ErrorMessage.js","components/NewCardForm.js","components/MenuItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginForm","attemptAction","event","preventDefault","state","input","test","props","showError","callback","handleUserInput","setState","target","value","this","onSubmit","className","htmlFor","type","id","onChange","disabled","allowAction","action","children","React","Component","Card","getColorIdentity","colors","identity","includes","getPrice","prices","result","undefined","usd","push","capitalizeWord","word","substring","toUpperCase","length","expandDescription","card","bought","name","quantity","rarity","sets","latestSet","imgUrl","hasFoil","onClick","checkOff","toLowerCase","aria-label","src","sparkle","alt","map","item","key","set","cardSets","ConfirmationButton","toggleIsConfirming","isConfirming","confirmAction","confirmationMessage","ListInfo","getTotals","info","cards","tPrice","tQuantity","forEach","parseFloat","usd_foil","parseInt","text","number","toLocaleString","getCardInformation","total","queryCardPrices","updatingPrices","priceUpdates","todaysDate","Date","lastPriceCheck","toDateString","axios","method","url","dataResponse","params","exact","timeout","myPromise","Promise","fulfill","reject","all","then","spread","results","updateCardPrices","pricesUpdated","catch","removeBoughtCards","removeAllCards","CardFilterForm","toggleIsShowingFilter","isShowingFilter","getSetSuggestions","setFilter","filter","RegExp","pSets","abr","fullName","possibleSets","takeSetSuggestion","isShowingNewCardForm","priceOrder","e","filterCards","autoComplete","pCard","index","style","top","ErrorMessage","hideError","setTimeout","onEnd","errorText","NewCardForm","queryNewCard","newCard","gettingCardDetails","fuzzy","data","prints_search_uri","arrayOfSets","printings","newCardQuantity","color_identity","foil","image_uris","small","addNewCard","cardAdded","focusOnCardInput","error","handleError","attemptQueryCardSuggestion","suggestionTimeoutID","clearTimeout","timeoutID","queryCardSuggestions","possibleCards","q","limitedSuggestions","slice","takeCardSuggestion","suggestion","response","showTheUserAnError","details","request","message","messageToShow","showApiError","errorMessage","textInput","current","focus","createRef","ref","min","max","required","MenuItem","toggleShowContents","showContents","position","icon","List","completeCallback","userCardsRef","database","account","once","newCardArray","val","updateCardToBought","cardsRef","child","currentData","update","newCardData","newPrice","filteredCards","currentCards","noPriceCards","splice","indexOf","sort","a","b","order","isMobileMenuShowing","on","cardArray","username","logoutCallback","localFirebaseRef","localUsernameRef","App","attemptLogin","usernameToLoginWith","talkingToFirebase","db","userbase","userHasLoggedIn","loginError","userReference","loggedInUsername","userRef","userIsLoggedIn","localStorage","setItem","usernameThatFailed","attemptSignup","usernameToSignupWith","signupError","signUserUp","takenUsername","newUser","logUserOut","removeItem","swapIsSigningUp","isSigningUp","loginAsGuest","loggedInAsGuest","dbRef","newGuestUser","Object","keys","guestAccount","path","pieces_","localUserRef","getItem","localUsername","logo","UserForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e77ddb4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2728_color.d7d1ddfc.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c75381dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/keyrune.77551c95.ttf\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBVaqoPIZyr-D_QY1-HFaa64dUt7F6bnfQ\",\n  authDomain: \"miko-sramek-project-five.firebaseapp.com\",\n  databaseURL: \"https://miko-sramek-project-five.firebaseio.com\",\n  projectId: \"miko-sramek-project-five\",\n  storageBucket: \"miko-sramek-project-five.appspot.com\",\n  messagingSenderId: \"945213463136\",\n  appId: \"1:945213463136:web:9ac00d9dafc605b7a30105\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React from 'react';\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      showError: false\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      input: ''\n    });\n  }\n  \n  attemptAction = (event) => {\n    event.preventDefault();\n    const regex = / /mg;\n    if(this.state.input !== '' && !regex.test(this.state.input)) {\n      this.props.callback(this.state.input);\n    }else {\n      //SCREAM AT USER\n      if(this.state.input === '') {\n        this.props.showError(\"Please enter a username!\");\n      }else{\n        this.props.showError(\"No spaces please!\");\n      }\n    }\n  }\n\n  handleUserInput = (event) => {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return(\n      <form onSubmit={this.attemptAction} className=\"userForm\">\n            \n        <label htmlFor=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" value={this.state.input} onChange={this.handleUserInput}/>\n        {/* After element for underline */}\n        <span></span>\n        \n        <button disabled={this.props.allowAction}>{this.props.action}</button>\n        <span className=\"formDivider\"></span>\n        {\n          this.props.children\n        }\n      </form>\n    );\n  }\n};\n\nexport default LoginForm;","import React from 'react';\n\nimport cardSets from '../assets/sets.json';\nimport sparkle from '../assets/2728_color.svg';\n\n\nclass Card extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expandDescription: false\n    }\n  }\n  getColorIdentity = (colors) => {\n    let identity = '';\n    //A brute force thing to make sure the colour identity is in WUBRG order. (It's an MTG thing)\n    if(colors.includes('W')){\n      identity += 'W';\n    }\n    if(colors.includes('U')){\n      identity += 'U';\n    }\n    if(colors.includes('B')){\n      identity += 'B';\n    }\n    if(colors.includes('R')){\n      identity += 'R';\n    }\n    if(colors.includes('G')){\n      identity += 'G';\n    }\n    if(identity === ''){\n      identity += 'Colorless'\n    }\n    return identity;\n  }\n\n  getPrice = (prices) => {\n    const result = [];\n    if(prices.usd !== undefined){\n      result.push(\"$\"+prices.usd+\" USD\");\n    } else {\n      result.push(\"No price info found.\");\n    }\n    return result;\n  }\n  capitalizeWord = (word) => {\n    let newWord = word.substring(0,1).toUpperCase() + word.substring(1, word.length);\n    return newWord;\n  }\n\n  render() {\n    const { bought, name, quantity, identity, rarity, sets, latestSet, prices, imgUrl, hasFoil } = this.props.card;\n    return(\n      <li>\n        {/* Start of Card Header Div */}\n        <div className=\"cardHeader\">\n        \t<span \n        \t  onClick={this.props.checkOff}\n        \t  className = {`${bought ? 'bought ' : ''}cardName`}\n        \t>\n        \t  <button>{bought ? <i className='far fa-check-square'></i> : <i className='far fa-square'></i>}</button> <span>{quantity}x {name}</span>\n            <i className={`ss ss-${latestSet.toLowerCase()} ss-${rarity.toLowerCase()}`}></i>\n        \t</ span>\n          \n        \t<button className=\"showDescriptionButton\" onClick={() => this.setState({expandDescription: !this.state.expandDescription})}>\n        \t  <i className={`fas fa-chevron-${this.state.expandDescription ? 'up' : 'down'}`} aria-label={`Expand the description for ${name}`}></i>   \n        \t</ button>\n\n        </div> {/* End of Card Header Div */}\n        {/* Start of Card Body Div */}\n        <div className={`cardBody ${this.state.expandDescription ? 'show' : 'hide'}`}>\n          { \n            // Is there a foil version available?\n            hasFoil\n              // Display the sparkle!\n              ? <div className=\"foilMark\"><img src={sparkle} alt=\"This card has a foil version available.\"/></div>\n              // Display nothing!\n              : null\n          }\n          \n          {/* Start of Card Details Div */}\n          <div className=\"cardDetails\">\n            {/* Start of Card Image Div */}\n            <div className=\"cardImage\">\n              <img src={imgUrl} alt={`The card for ${name}`}/>\n            </div> {/* End of Card Image Div */}\n            {/* Start of Card Text Div */}\n            <div className=\"cardText\">\n              <p>Identity: \n                {\n                  this.getColorIdentity(identity)\n                }\n              </p>\n              <p>Rarity: {this.capitalizeWord(rarity)}</p>\n              {\n                this.getPrice(prices).map((item) => {\n                  return <p key={item}>Price: {item}</p>\n                })\n              }\n            </div> {/* End of Card Text Div */}\n          </div> {/* End of Card Details Div */}\n          {\n            sets.map( (set) => {\n              // return  <i key={name+set} className={`ss ss-${set.toLowerCase()} ss-${rarity.toLowerCase()}`}></i> \n              return (\n              // Does the set exist in the card sets json\n              (cardSets[set.toUpperCase()] !== undefined)\n                // Display the set!\n                ? <p key={name+set}><i className={`ss ss-${set} ss-${rarity}`}></i> {cardSets[set.toUpperCase()]}</p>\n                // Display nothing! Shhhh!\n                : null  \n              )\n            })\n          }\n\n        </div> {/* End of Card Body Div */}\n      </li>\n    );\n  }\n};\n\nexport default Card;","import React from 'react';\n\nclass ConfirmationButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isConfirming: false,\n    }\n  }\n  toggleIsConfirming = () => {\n    this.setState({\n      isConfirming: !this.state.isConfirming\n    });\n  }\n\n  confirmAction = () => {\n    this.props.confirmAction();\n    this.toggleIsConfirming();\n  }\n\n  render() {\n    return(\n      <div className={`clearBoughtButton ${this.state.isConfirming ? 'clearBoughtConfirming' : ''}`}>\n        {\n          this.state.isConfirming \n            ? <>\n                <p>{this.props.confirmationMessage}</p>\n                <div>\n                  <button onClick={this.confirmAction} className={`confirmClearButton ${this.state.isConfirming ? 'show' : ''}`}><i className=\"fas fa-check-circle\" aria-label=\"Confirm clearing bought cards.\"></i></button>\n                  <button onClick={this.toggleIsConfirming}><i className=\"fas fa-times-circle\" aria-label=\"Cancel clearing bought cards.\"></i></button>\n                </div>\n              </>\n            : <button onClick={this.toggleIsConfirming}>{this.props.action}</button>\n        }\n      </div>\n    );\n  }\n};\n\nexport default ConfirmationButton;","import React from 'react';\nimport axios from 'axios';\n\nimport ConfirmationButton from './ConfirmationButton';\nclass ListInfo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      updatingPrices: false\n    }\n  }\n  getTotals = () => {\n    const info = [];\n    if(this.props.cards !== undefined){\n      let tPrice = 0;\n      let tQuantity = 0;\n      this.props.cards.forEach((card) => {\n        //If the card has a price in usd, add it to the totals, if it doesn't, check if it does in foil.\n        if(card.prices.usd !== undefined){\n          tPrice += parseFloat(card.prices.usd) * card.quantity;\n        }else if(card.prices.usd_foil !== undefined) {\n          tPrice += parseFloat(card.prices.usd_foil) * card.quantity;\n        }\n        tQuantity += parseInt(card.quantity);\n      });\n      info.push({\n        text: 'Total price: ',\n        number: '$' + tPrice.toLocaleString() + ' USD'\n      });\n      info.push({\n        text: 'Number of cards: ',\n        number: tQuantity.toLocaleString()\n      });\n      return info;\n    }\n  }\n  getCardInformation = () => {\n    const info = {};\n    info.total = 0;\n    info.quantity = 0;\n    if(this.props.cards !== undefined) {\n      this.props.cards.forEach((card) => {\n        if(card.prices.usd !== undefined){\n          info.total += parseFloat(card.prices.usd) * card.quantity;\n        }else if(card.prices.usd_foil !== undefined) {\n          info.total += parseFloat(card.prices.usd_foil) * card.quantity;\n        }\n        info.quantity += parseInt(card.quantity);\n      });\n    }\n    info.total = info.total.toLocaleString();\n    info.quantity = info.quantity.toLocaleString();\n    return info;\n  }\n  queryCardPrices = () => {\n    if(!this.state.updatingPrices) {\n      this.setState({\n        updatingPrices: true\n      })\n      const priceUpdates = [];\n      this.props.cards.forEach( (card) => {\n        const todaysDate = new Date();\n        if(card.lastPriceCheck !== todaysDate.toDateString()){\n          priceUpdates.push(\n            axios({\n              method: 'GET',\n              url: 'https://api.scryfall.com/cards/named',\n              dataResponse: 'json',\n              params: {\n                exact: card.name,\n              },\n              timeout: 10000,\n            })\n          );\n        }else{\n          //An empty promise -> from the Juno notes\n          const myPromise = new Promise( (fulfill, reject) => {\n            // here we say what will be returned from the promise if it is fulfilled\n            fulfill('successful!')\n            // here we say what will be returned from the promise if it is rejected\n            reject('not successful!')\n          })\n          priceUpdates.push(\n            myPromise\n          )\n        }\n      });\n      axios\n        .all(priceUpdates)\n        .then(\n          axios.spread(\n            (...results) => {\n              this.props.updateCardPrices(results, this.pricesUpdated);\n            }\n          )\n        ).catch((...errors) => {\n          this.setState({\n            updatingPrices: false\n          })\n        });\n    }\n  }\n  pricesUpdated = () => {\n    this.setState({\n      updatingPrices: false\n    })\n  }\n  render() {\n    const info = this.getCardInformation();\n    return(\n      <div className=\"listInfoPanel\">\n        <h3>Total Price: ${info.total} USD</h3>\n        <h3>Number of Cards: {info.quantity}</h3>\n        <button className=\"updatePricesButton\" onClick={this.queryCardPrices} disabled={this.state.updatingPrices}>\n          <i className={`fas fa-sync-alt ${this.state.updatingPrices ? 'updating' : ''}`} aria-label=\"Update card prices.\"></i>\n        </button>\n        <div>\n          <ConfirmationButton action=\"Clear Bought\" confirmationMessage=\"Clear bought cards?\" confirmAction={this.props.removeBoughtCards} />\n          <ConfirmationButton action=\"Clear All\" confirmationMessage=\"Clear all cards?\" confirmAction={this.props.removeAllCards} />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default ListInfo;","import React from 'react';\n// import files\nimport cardSets from '../assets/sets.json';\nclass CardFilterForm extends React.Component {\n  constructor() {\n    super();\n    this.state= {\n      possibleSets: [],\n      isShowingNewCardForm: false,\n      isShowingFilter: false,\n      priceOrder: 'none',\n      setFilter: ''\n    }\n  }\n  toggleIsShowingFilter = () => {\n    this.setState({\n      isShowingFilter: !this.state.isShowingFilter\n    });\n  }\n  getSetSuggestions = () => {\n    const input = this.state.setFilter;\n    if(input !== ''){\n      const filter = new RegExp(input, \"i\");\n      const pSets = [];\n      for(let set in cardSets){\n        if((filter.test(cardSets[set]) || filter.test(set)) && pSets.length < 6){\n          pSets.push({abr: set, fullName: cardSets[set]});\n        }\n      }\n      this.setState({\n        possibleSets: pSets\n      })\n    }else{\n      this.setState({\n        possibleSets: []\n      })\n    }\n  }\n  takeSetSuggestion = (event) => {\n    event.preventDefault();\n    this.setState({\n      possibleSets: [],\n      setFilter: event.target.value\n    });\n  }\n  render() {\n    return(\n      <>\n        <div className={`cardFilterPanel show`}>\n          <form onSubmit={(e) => this.props.filterCards(e, this.state.setFilter, this.state.priceOrder)}>\n            <label htmlFor=\"priceOrder\">Order by Price:</label>\n            <select name=\"priceOrder\" id=\"priceOrder\" onChange={(e) => this.setState({priceOrder: e.target.value})}>\n              <option value=\"none\">None</option>\n              <option value=\"asc\">High to Low</option>\n              <option value=\"desc\">Low to High</option>\n            </select>\n            <label htmlFor=\"setFilter\">Filter by Set:</label>\n            <input type=\"text\" autoComplete=\"off\" id=\"setFilter\" value={this.state.setFilter} onChange={ (e) => { this.setState({setFilter: e.target.value}, this.getSetSuggestions); } }/>\n            {/* Underline span */}\n            <span></span>\n            {\n              this.state.possibleSets.map((pCard, index) => {\n                return <button value={pCard.abr} onClick={this.takeSetSuggestion} type=\"button\" key={pCard.abr+index} className=\"setSuggestion\" style={{top: `${104 + 37*index}px`}} >{pCard.abr}: {pCard.fullName}</button>\n              })\n            }\n            <button>Apply filter</button>\n          </form>\n        </div>\n      </>\n    );\n  }\n};\n\nexport default CardFilterForm;","import React from 'react';\n\n\nclass ErrorMessage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showError: true,\n    }\n  }\n  //When the component mounts, set a timer until it fades out\n  componentDidMount() {\n    setTimeout(this.hideError, 1200);\n  }\n  //When it starts to fade out, start a timer until it unmounts itself with a callback\n  hideError = () => {\n    this.setState({\n      showError: false\n    });\n    setTimeout(this.props.onEnd, 340);\n  }\n  render() {\n    return(\n      <div className={this.state.showError ? \"userWarning\" : \"userWarning userWarningHidden\"}>\n        <p>{this.props.errorText}</p>\n      </div>\n    );\n  }\n};\n\nexport default ErrorMessage;","import React from 'react';\nimport axios from 'axios';\n\nimport ErrorMessage from './ErrorMessage';\n\nclass NewCardForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      gettingCardDetails: false,\n      newCard: '',\n      newCardQuantity: 1,\n      \n      showApiError: false,\n      errorMessage: '',\n\n      suggestionTimeoutID: undefined,\n      possibleCards: [],\n    }\n    this.textInput = React.createRef();\n  }\n  queryNewCard = (event) => {\n    event.preventDefault();\n    if(this.state.newCard !== ''){    \n      this.setState({\n        gettingCardDetails: true\n      });\n      //Inital call to find the card\n      axios({\n        method: 'GET',\n        url: 'https://api.scryfall.com/cards/named',\n        dataResponse: 'json',\n        params: {\n          fuzzy:this.state.newCard,\n        },\n        timeout: 10000,\n      }).then( (result) => {\n        //Make another call to get all the printings of the card\n        axios({\n          method: 'GET',\n          url: result.data.prints_search_uri,\n          dataResponse: 'json',\n        }).then( (cardSets) => {\n          //Throw it into a variable\n          const arrayOfSets = cardSets.data.data;\n\n          //Push it into an array, and make sure there aren't any duplicates\n          const printings = [];\n          arrayOfSets.forEach((card) => {\n            if(!printings.includes(card.set)){\n              printings.push(card.set);\n            }\n          });\n          //Create the card object to throw at firebase\n          const newCard = {\n            name: result.data.name,\n            quantity: this.state.newCardQuantity,\n            rarity: result.data.rarity,\n            identity: result.data.color_identity,\n            sets: printings,\n            latestSet: result.data.set,\n            prices: result.data.prices,\n            hasFoil: result.data.foil,\n            imgUrl: result.data.image_uris.small,\n            bought: false,\n            lastPriceCheck: new Date().toDateString()\n          }\n          //If the sets or identity are 0 (if the api doesn't have them or they're colorless), create a dummy array so firebase doesn't delete it\n          if(newCard.sets.length === 0){\n            newCard.sets = ['No recorded sets.']\n          }\n          if(newCard.identity.length === 0) {\n            newCard.identity = ['Colorless']\n          }\n          //Pass the data to the function\n          this.props.addNewCard(newCard, this.cardAdded);\n          //Show the form for user submition once again\n          this.setState({\n            gettingCardDetails: false\n          });\n          this.focusOnCardInput();\n        }).catch( (error) => {\n          this.handleError(error);\n        });\n      }).catch( (error) => {\n        //General card is not found!\n        this.handleError(error);\n      });\n    }else{\n      //SCREAM AT THE USER\n    }\n  }\n  attemptQueryCardSuggestion = () => {\n    if(this.state.newCard !== ''){\n      if(this.state.suggestionTimeoutID !== undefined){\n        clearTimeout(this.state.suggestionTimeoutID);\n        const timeoutID = setTimeout(this.queryCardSuggestions, 300);\n        this.setState({\n          suggestionTimeoutID: timeoutID\n        });\n      }else{\n        const timeoutID = setTimeout(this.queryCardSuggestions, 300);\n        this.setState({\n          suggestionTimeoutID: timeoutID\n        });\n      }\n    }else{\n      this.setState({\n        possibleCards: []\n      })\n    }\n  }\n  queryCardSuggestions = () => {\n    this.setState({\n      suggestionTimeoutID: undefined\n    });\n    axios({\n      method: 'GET',\n      url: 'https://api.scryfall.com/cards/autocomplete',\n      dataResponse: 'json',\n      params: {\n        q:this.state.newCard,\n      }\n    }).then( (result) => {\n      if(result.data.data.length > 0){\n        var limitedSuggestions = result.data.data.slice(0, 10);\n        this.setState({\n          possibleCards: limitedSuggestions\n        })\n      }else{\n        this.setState({\n          possibleCards: []\n        })\n      }\n      \n    }).catch( (error) => {\n      this.handleError(error);\n    });\n  }\n  takeCardSuggestion = (event) => {\n    const suggestion = event.target.value;\n    this.setState({\n      newCard: suggestion,\n      possibleCards: []\n    })\n  }\n  cardAdded = () => {\n    this.setState({\n      newCard: '',\n      possibleCards: [],\n      newCardQuantity: 1\n    });\n  }\n  //IF statements from axios docs\n  handleError = (error) => {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      this.showTheUserAnError(error.response.data.details);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      this.showTheUserAnError(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      this.showTheUserAnError(error.message);\n    }\n  }\n  showTheUserAnError = (messageToShow) => {\n    this.setState({\n      showApiError: true,\n      errorMessage: messageToShow\n    });\n  }\n  hideError = () => {\n    this.setState({\n      showApiError: false,\n      errorMessage: '',\n      gettingCardDetails: false\n    });\n    this.focusOnCardInput();\n  }\n  //Focus code found from\n  //https://stackoverflow.com/questions/43145549/how-react-programmatically-focus-input\n  focusOnCardInput = () => {\n    this.textInput.current.focus();\n  }\n  render() {\n    return(\n      <div className=\"newCardDiv show\">  \n        \t{\n            //Is the api call being made?\n            this.state.gettingCardDetails\n              //Is there an API error?\n        \t    ? this.state.showApiError\n                  ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                  : <p>Fetching card data</p>\n        \t    : <form onSubmit={this.queryNewCard} className=\"newCardForm\">\n        \t        <div>\n                    <label htmlFor=\"newCardName\">Card name:</label>\n                    <input type=\"text\" id=\"newCardName\" \n                      value={this.state.newCard} \n                      onChange={(e) => { this.setState({newCard:e.target.value}); this.attemptQueryCardSuggestion(); }} \n                      ref={this.textInput}\n                    />\n                    <span></span> \n                  </div>\n                  {/* Underline span */}\n                  {\n                    this.state.possibleCards.map((pCard, index) => {\n                      return <button value={pCard} onClick={this.takeCardSuggestion} type=\"button\" key={pCard+index} className=\"cardSuggestion\" style={{top: `${61 + 37*index}px`}} >{pCard}</button>\n                    })\n                  }\n        \t        <div>\n                    <label htmlFor=\"newCardQuantity\">How many:</label>\n                    <input type=\"number\" id=\"newCardQuantity\" \n                      value={this.state.newCardQuantity} \n                      onChange={(e) => this.setState({newCardQuantity:e.target.value})}\n                      min=\"1\" max=\"200\"\n                      required\n                    />\n                    {/* Underline span */}\n                    <span></span>\n                  </div>\n        \t        <button>Add Card</button>\n        \t      </form>\n        \t}\n        </div>\n    );\n  }\n};\n\nexport default NewCardForm;","import React from 'react';\n\nclass MenuItem extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showContents: false\n    }\n  }\n  toggleShowContents = () => {\n    this.setState({\n      showContents: !this.state.showContents\n    });\n  }\n  render() {\n    return(\n      <li className={`menuItem menuItem${this.props.position} ${this.state.showContents ? 'shift' : ''}`}>\n        <button onClick={this.toggleShowContents} className={`menuItemButton ${this.state.showContents ? 'show' : ''}`}>\n          <i className={this.props.icon} aria-label={this.props.action}></i>\n        </button>\n        <div>\n          <div className={`menuItemBacking ${this.state.showContents ? 'show' : ''}`}>\n          </div>\n          <div className={`menuItemContent ${this.state.showContents ? 'show' : ''}`}>\n            {this.props.children}\n          </div>\n        </div>\n      </li>\n    );\n  }\n};\n\nexport default MenuItem;","// import required modules\nimport React from 'react';\nimport firebase from '../firebase.js';\n\n// import Components\nimport Card from './Card';\n// import ErrorMessage from './ErrorMessage';\n// import ConfirmationButton from './ConfirmationButton';\n\nimport ListInfo from './ListInfo';\nimport CardFilterForm from './CardFilterForm';\nimport NewCardForm from './NewCardForm';\n\nimport MenuItem from './MenuItem';\n\n\nclass List extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cards:[],\n      filteredCards: [],\n      isMobileMenuShowing: false,\n    }\n  }\n  componentDidMount() {\n    const userRef = firebase.database().ref(this.props.account);\n    userRef.on('value', (account) => {\n      const cardArray = account.val().cards;\n      if(cardArray !== undefined){\n        this.setState({\n          cards: cardArray,\n          filteredCards: cardArray\n        });\n      }else{\n        this.setState({\n          cards: [],\n          filteredCards: []\n        })\n      }\n    });\n  }\n\n  addNewCard = (card, completeCallback) => {\n    const userCardsRef = firebase.database().ref(`${this.props.account}/cards`);\n    userCardsRef.once('value', (data) => {\n      //If there isn't an array, give it a new array\n      //If there is one, spread it and add the new card\n      let newCardArray;\n      if(data.val() === null){\n        newCardArray = [card];\n      }else{\n        newCardArray = [...data.val(), card];\n      }\n      userCardsRef.set(newCardArray);\n    });\n    completeCallback();\n  }\n\n  updateCardToBought = (index) => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards/${index}`);\n    cardsRef.once('value', (data) => {\n      const currentData = data.val();\n      cardsRef.update({\n        bought: !currentData.bought\n      });\n    });\n  }\n\n  updateCardPrices = (newCardData, completeCallback) => {\n    newCardData.forEach((card, index) => {\n      if(card.data != null){\n        const newPrice = card.data.prices;\n        const cardsRef = firebase.database().ref(this.props.account).child(`cards/${index}`);\n        cardsRef.once('value', (data) => {\n          cardsRef.update({\n            prices: newPrice,\n            lastPriceCheck: new Date().toDateString()\n          })\n        });\n      }\n    });\n    completeCallback();\n  }\n\n  removeBoughtCards = () => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards`);\n    const filteredCards = this.state.cards.filter((card) => {\n      return !card.bought\n    });\n    cardsRef.set(filteredCards);\n  }\n  removeAllCards = () => {\n    const cardsRef = firebase.database().ref(this.props.account).child(`cards`);\n    cardsRef.set([]);\n  }\n\n  filterCards = (event, setFilter, priceOrder) => {\n    event.preventDefault();\n    const currentCards = [...this.state.cards];\n    let newCardArray = [];\n\n    if(setFilter !== ''){\n      newCardArray = currentCards.filter((card) => {\n        if(card.sets.includes(setFilter.toLowerCase())){\n          return true;\n        }else{\n          return false;\n        }\n      });\n    }else {\n      newCardArray = [...currentCards];\n    }\n    \n    if(priceOrder !== 'none'){\n      const noPriceCards = [];\n      newCardArray.forEach((card) => {\n        if(card.prices.usd === undefined){\n          noPriceCards.push(card);\n        }\n      });\n      noPriceCards.forEach((card) => {\n        newCardArray.splice(newCardArray.indexOf(card), 1);\n      });\n      newCardArray.sort((a, b) => {\n        const order = priceOrder;\n        //if order is ASC return the higher one\n        if(order === 'asc'){\n          return parseFloat(a.prices.usd) < parseFloat(b.prices.usd) ? 1 : -1;\n        }\n        //if order is DESC return the lower one\n        else if(order === 'desc'){\n          return parseFloat(a.prices.usd) > parseFloat(b.prices.usd) ? 1 : -1;\n        }\n        return -1;\n      })\n    }\n\n    this.setState({\n      filteredCards: newCardArray\n    })\n  }  \n\n  \n  render() {\n    return(\n      <div>\n        <nav>\n          <button className=\"mobileMenuToggle\" onClick={() => {this.setState({isMobileMenuShowing: !this.state.isMobileMenuShowing})}}>\n            <span className={`${this.state.isMobileMenuShowing ? 'open' : ''}`}></span>\n            <span className={`${this.state.isMobileMenuShowing ? 'open' : ''}`}></span>\n            <span className={`${this.state.isMobileMenuShowing ? 'open' : ''}`}></span>\n          </button>\n          <ul className={`menuItemList ${this.state.isMobileMenuShowing ? 'expand' : ''}`}>\n            <MenuItem icon=\"fas fa-times rotate45\" action=\"Add a card\" position={0}>\n                <NewCardForm addNewCard={this.addNewCard} />\n            </MenuItem>\n            <MenuItem icon=\"fas fa-receipt\" action=\"Summary\" position={1}>\n              <ListInfo cards={this.state.cards}  updateCardPrices={this.updateCardPrices} removeBoughtCards={this.removeBoughtCards} removeAllCards={this.removeAllCards} />\n            </MenuItem>\n            <MenuItem icon=\"fas fa-filter\" action=\"Filter your list\" position={2}>\n              <CardFilterForm filterCards={this.filterCards} />\n            </MenuItem>\n          </ul>\n        </nav>\n        <main>\n          <div className=\"innerWrapper\">\n            <h3>Hi, {this.props.username}! Here is your list:</h3>\n    \n            \n    \n            <button className=\"logoutButton\" onClick={this.props.logoutCallback}>Log Out</button>\n           \n            {/* Start of Card List */}\n            <ul className=\"cardList\">\n              {\n                //Are there card and more than 0 cards?\n                this.state.filteredCards !== undefined && this.state.filteredCards.length > 0\n                  //Map through them!\n                  ? this.state.filteredCards.map((item, index) => {\n                    return(\n                      <Card key={index} checkOff={() => this.updateCardToBought(index)} card={item}/>\n                    )\n                  })\n                  //Show a placeholder message!\n                  : <li className=\"placeholderCard\">Add cards by pressing the + button!</li>\n              }\n            </ul> {/* End of Card List */}\n            \n          </div> {/* End of Inner Wrapper */}\n        </main>\n      </div>\n    );\n  }\n};\n\nexport default List;","import React from 'react';\n\nimport firebase from './firebase.js';\nimport UserForm from './components/UserForm.js';\n\nimport List from \"./components/List\";\nimport ErrorMessage from './components/ErrorMessage.js';\n\nimport './styles/style.scss';\n\nimport logo from './assets/logo.svg'\nimport './fonts/keyrune.ttf';\n\n\nconst localFirebaseRef = 'user-ref';\nconst localUsernameRef = 'user-name';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userIsLoggedIn: false,\n      isSigningUp: false,\n      talkingToFirebase: false,\n      userRef: '',\n      username: '',\n      showError: false,\n      errorMessage: '',\n      loggedInAsGuest: false\n    }\n  }\n  componentDidMount() {\n    //Check if the user has a localstorage for thing\n    const localUserRef = localStorage.getItem(localFirebaseRef);\n    const localUsername = localStorage.getItem(localUsernameRef);\n    if(localUserRef !== null) {\n      this.setState({\n        userIsLoggedIn: true,\n        userRef: localUserRef,\n        username: localUsername ? localUsername : ''\n      })\n    }\n  }\n\n  showTheUserAnError = (messageToShow) => {\n    this.setState({\n      showError: true,\n      errorMessage: messageToShow\n    });\n  }\n\n  attemptLogin = (usernameToLoginWith) => {\n    this.setState({\n      talkingToFirebase: true\n    });\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      for(let index in userbase){\n        if(usernameToLoginWith === userbase[index].username){\n          this.userHasLoggedIn(index, usernameToLoginWith);\n          return;\n        }\n      }\n      //The account doesn't exist\n      this.loginError(usernameToLoginWith);\n      this.setState({\n        talkingToFirebase: false\n      });\n    })\n  }\n\n  userHasLoggedIn = (userReference, loggedInUsername) => {\n    this.setState({\n      userRef: userReference,\n      userIsLoggedIn: true,\n      username: loggedInUsername,\n      talkingToFirebase: false\n    });\n    localStorage.setItem(localFirebaseRef, userReference);\n    localStorage.setItem(localUsernameRef, loggedInUsername);\n  }\n\n  loginError = (usernameThatFailed) => {\n    this.showTheUserAnError(usernameThatFailed + \" is not registered!\")\n  }\n\n  attemptSignup = (usernameToSignupWith) => {\n    this.setState({\n      talkingToFirebase: true\n    });\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      for(let index in userbase){\n        if(usernameToSignupWith === userbase[index].username){\n          //The account already exists\n          this.signupError(usernameToSignupWith);\n          this.setState({\n            talkingToFirebase: false\n          });\n          return;\n        }\n      }\n      this.signUserUp(usernameToSignupWith);\n    })\n  }\n\n  signupError = (takenUsername) => {\n    // alert(\"Oopsy doopsy thewe was a fucky wucky uwu! \" + takenUsername + \" is already taken owo!\");\n    this.showTheUserAnError(takenUsername + \" is already taken!\");\n  }\n\n  signUserUp = (usernameToSignupWith) => {\n    const newUser = {\n      username: usernameToSignupWith,\n      // This is only to show object structure (firebase won't recognize it as a thing)\n      // cards: [] \n    }\n    firebase.database().ref().push(newUser);\n    this.showTheUserAnError(\"Signup was Successful!\");\n    this.setState({\n      talkingToFirebase: false\n    });\n    this.attemptLogin(usernameToSignupWith);\n  }\n\n  logUserOut = () => {\n    localStorage.removeItem(localFirebaseRef);\n    this.setState({\n      userRef: '',\n      userIsLoggedIn: false\n    });\n  }\n\n\n  swapIsSigningUp = () => {\n    this.setState({\n      isSigningUp: !this.state.isSigningUp\n    });\n  }\n\n\n  //Call back functions from the ErrorMessage component!\n  showError = (message) => {\n    this.showTheUserAnError(message);\n  }\n  hideError = () => {\n    this.setState({\n      showError: false\n    });\n  }\n\n  loginAsGuest = () => {\n    this.setState({\n      talkingToFirebase: true,\n      loggedInAsGuest: false\n    });\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (db) => {\n      const userbase = db.val();\n      const numberOfUsers = Object.keys(userbase).length;\n      const guestUserName = 'guest' + numberOfUsers;\n      const newGuestUser = {\n        username: guestUserName,\n        guestAccount: true,\n      }\n      const ref = dbRef.push(newGuestUser);\n      ref.then((a) => {\n          const name = 'guest' + a.path.pieces_[0];\n          firebase.database().ref(a.path.pieces_[0]).update({\n            username: name\n          });\n          this.attemptLogin(name);\n          this.setState({\n            loggedInAsGuest: true\n          });\n        } \n      );\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"appParent\">\n        {/* Start of Wrapper */}\n        <div className=\"wrapper\">\n          <header>\n            <div className=\"innerWrapper\">\n              <img className=\"logo\" src={logo} alt=\"A wax seal.\" />\n              <h1>Dear Magic</h1>\n              <h2>A personal buylist for <span>Magic: The Gathering</span></h2>\n            </div>\n          </header>\n        </div> {/* End of Wrapper */}\n        { \n          // Is the user logged in?\n          this.state.userIsLoggedIn\n            // Show them their list!\n            ? <List account={this.state.userRef} username={this.state.username} logoutCallback={this.logUserOut} />\n            // Show them the login/signup form -> Are they signing up?\n            : this.state.isSigningUp\n                // Show them the signup form\n                ? <div className=\"wrapper\">\n                    <main>\n                      { \n                        this.state.showError\n                          ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                          : null\n                      }\n                      <UserForm \n                        action=\"Signup\" \n                        allowAction={this.state.talkingToFirebase} \n                        callback={this.attemptSignup} \n                        showError={this.showError} \n                      >\n                        <button type=\"button\" onClick={this.swapIsSigningUp} className=\"userActionSwapButton\">\n                          Already a user?\n                        </button>\n                      </UserForm>\n                      <button className=\"guestLoginButton\" onClick={this.loginAsGuest}>Continue as Guest</button>\n                    </main>\n                </div>  /* End of Wrapper */\n                // Show them the login form\n                : <div className=\"wrapper\">\n                    <main>\n                      { \n                        this.state.showError\n                          ? <ErrorMessage errorText={this.state.errorMessage} onEnd={this.hideError} />\n                          : null\n                      }\n                      <UserForm \n                        action=\"Login\" \n                        callback={this.attemptLogin}  \n                        showError={this.showError}\n                        allowAction={this.state.talkingToFirebase} \n                      >\n                        <button type=\"button\" onClick={this.swapIsSigningUp} className=\"userActionSwapButton\">\n                          Need an account?\n                        </button>\n                      </UserForm>\n                      <button className=\"guestLoginButton\" onClick={this.loginAsGuest}>Continue as Guest</button>\n                  </main>\n                </div> /* End of Wrapper */\n        }\n        {/* Start of Wrapper */}\n        <div className=\"wrapper\">\n          <footer>\n              <p>mikosramek © 2019</p>\n          </footer>\n        </div>  {/* End of Wrapper */}\n\n       \n      </div> /* End of App div */\n    );\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}